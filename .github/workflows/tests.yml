name: Run Tests
run-name: Started Tests by @${{ github.actor }}

on:
  pull_request:

jobs:
  test_suite:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.13"
          - "3.12"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.8.3"

      - name: Setup a local virtual environment
        working-directory: ./
        run: poetry config virtualenvs.create false --local

      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        working-directory: ./
        run: poetry install --no-root --no-interaction --no-ansi

      - name: MyPy check
        working-directory: ./
        run: poetry run mypy .

      - name: Ruff code style check
        working-directory: ./
        run: poetry run ruff check .

      - name: Run the automated tests
        working-directory: ./
        run: poetry run coverage run -m pytest . -vv

      - name: Coverage report
        working-directory: ./
        run: poetry run coverage report

      - name: Generate coverage report
        if: matrix.python-version == '3.13'
        working-directory: ./
        run: |
          poetry run coverage report
          COVERAGE=$(poetry run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          echo "Coverage: $COVERAGE%" > coverage_status.txt

      - name: Update GitHub status with coverage
        if: matrix.python-version == '3.13'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage_status.txt', 'utf8').trim();
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: coverage,
              context: 'coverage'
            });
